// Here is the full, completed Prisma schema with all the necessary tables. All model and field names are in camelCase, and each model has an explicit `@@map()` to set its table name in the database.

// -----

// ```prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Language {
  en
  uz
}

enum Theme {
  light
  dark
}

enum FieldType {
  text
  number
  boolean
  date
}

model Users {
  id                      String          @id @default(uuid())
  email                   String          @unique
  name                    String?
  username                String          @unique @default(uuid())
  passwordHash            String?
  isAdmin                 Boolean         @default(false)
  isActive                Boolean         @default(true)
  isVerified              Boolean         @default(false)
  emailVerificationToken  String?         @unique
  emailVerificationExpiry DateTime?
  theme                   Theme           @default(light)
  language                Language        @default(en)
  createdAt               DateTime        @default(now())
  socialLogins            SocialLogins[]
  inventories             Inventories[]
  accessControl           AccessControl[]
  itemsCreated            Items[]
  comments                Comments[]
  likes                   Likes[]

  @@map("users")
}

model SocialLogins {
  id             String   @id @default(uuid())
  userId         String
  provider       String
  providerUserId String
  createdAt      DateTime @default(now())
  user           Users    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerUserId])
  @@map("social_logins")
}

model Inventories {
  id               String   @id @default(uuid())
  ownerId          String
  title            String
  description      String?
  category         String?
  imageUrl         String?
  isPublic         Boolean  @default(true)
  version          Int      @default(1)
  lastCustomNumber Int      @default(0)
  createdAt        DateTime @default(now())

  owner         Users           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  items         Items[]
  fields        Fields[]
  accessControl AccessControl[]
  inventoryTags InventoryTags[]
  comments      Comments[]

  @@map("inventories")
}

model AccessControl {
  userId      String
  inventoryId String
  createdAt   DateTime @default(now())

  user      Users       @relation(fields: [userId], references: [id], onDelete: Cascade)
  inventory Inventories @relation(fields: [inventoryId], references: [id], onDelete: Cascade)

  @@id([userId, inventoryId])
  @@map("access_control")
}

model Items {
  id          String   @id @default(uuid())
  inventoryId String
  creatorId   String?
  customId    String
  version     Int      @default(1)
  createdAt   DateTime @default(now())

  inventory   Inventories   @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  creator     Users?        @relation(fields: [creatorId], references: [id], onDelete: SetNull)
  fieldValues FieldValues[]
  likes       Likes[]

  @@unique([inventoryId, customId])
  @@map("items")
}

model Fields {
  id             String    @id @default(uuid())
  inventoryId    String
  title          String
  type           FieldType
  displayInTable Boolean   @default(true)
  sortOrder      Int       @default(0)

  inventory   Inventories   @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  fieldValues FieldValues[]

  @@unique([inventoryId, title])
  @@map("fields")
}

model FieldValues {
  id           String    @id @default(uuid())
  itemId       String
  fieldId      String
  valueString  String?
  valueNumber  Float?
  valueBoolean Boolean?
  valueDate    DateTime?

  item  Items  @relation(fields: [itemId], references: [id], onDelete: Cascade)
  field Fields @relation(fields: [fieldId], references: [id], onDelete: Cascade)

  @@unique([itemId, fieldId])
  @@map("field_values")
}

model Tags {
  id   String @id @default(uuid())
  name String @unique

  inventoryTags InventoryTags[]

  @@map("tags")
}

model InventoryTags {
  inventoryId String
  tagId       String
  createdAt   DateTime @default(now())

  inventory Inventories @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  tag       Tags        @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([inventoryId, tagId])
  @@map("inventory_tags")
}

model Comments {
  id          String   @id @default(uuid())
  inventoryId String
  userId      String
  content     String
  createdAt   DateTime @default(now())

  inventory Inventories @relation(fields: [inventoryId], references: [id], onDelete: Cascade)
  user      Users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Likes {
  userId    String
  itemId    String
  createdAt DateTime @default(now())

  user Users @relation(fields: [userId], references: [id], onDelete: Cascade)
  item Items @relation(fields: [itemId], references: [id], onDelete: Cascade)

  @@id([userId, itemId])
  @@map("likes")
}
